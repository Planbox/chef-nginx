#! /bin/sh
### BEGIN INIT INFO
# Provides:          nginx
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Nginx Web Server (https://github.com/SobanVuex/chef-nginx)
# Description:       Controll the Nginx Web Server daemon
### END INIT INFO

# Author: Alex Soban <soban.vuex@gmail.com>
INIT_VERBOSE=yes

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/opt/bin
USER=<%= node[:nginx][:user] %>
NAME=nginx
DESC="Nginx Web Server (v<%= node[:nginx][:version] %>)"

PIDDIR=<%= node[:nginx][:pid_path] %>
LOGDIR=<%= node[:nginx][:log_path] %>
CONFDIR=<%= node[:nginx][:conf_path] %>

DAEMON=<%= node[:nginx][:binary_file] %>
PIDFILE=$PIDDIR/$NAME.pid
CONFFILE=$CONFDIR/$NAME.conf

NGINX_GLOBAL=""

SCRIPTNAME=/etc/init.d/$NAME

[ ! -x $DAEMON ] && echo "$DAEMON: No such file or directory" && exit 0

[ -r /etc/default/$NAME ] && . /etc/default/$NAME

[ "$NGINX_GLOBAL" != ""  ] \
    && DAEMON_ARGS="-g $NGINX_GLOBAL" \
    || DAEMON_ARGS=""

. /lib/init/vars.sh

. /lib/lsb/init-functions

do_start()
{
    mkdir -p $PIDDIR $LOGDIR
    start-stop-daemon --start --quiet --pidfile $PIDFILE \
        --exec $DAEMON --test > /dev/null \
        || return 1

    start-stop-daemon --start --quiet --pidfile $PIDFILE \
        --exec $DAEMON -- $DAEMON_ARGS \
        || return 2
}

do_stop()
{
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2

    rm -f $PIDFILE
    return "$RETVAL"
}

do_configtest() {
        $DAEMON -t -c $CONFFILE
}

do_reload() {
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
    return 0
}

case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    status)
        status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
    configtest)
        do_configtest
        ;;
    reload|force-reload)
        log_daemon_msg "Reloading $DESC" "$NAME"
        do_reload
        log_end_msg $?
        ;;
    restart)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1)
                do_start
                case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
            *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|status|configtest|reload|force-reload|restart}" >&2
        exit 3
        ;;
esac

:
